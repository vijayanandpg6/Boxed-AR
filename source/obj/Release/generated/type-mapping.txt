com/google/ar/core/Anchor = Google.AR.Core.Anchor
  <init>()V = .ctor()
  getCloudAnchorId()Ljava/lang/String; = CloudAnchorId
  getPose()Lcom/google/ar/core/Pose; = Pose
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  detach()V = Detach()
  getCloudAnchorState()Lcom/google/ar/core/Anchor$CloudAnchorState; = GetCloudAnchorState()
com/google/ar/core/annotations/NativeEnum = Google.AR.Core.Annotations.INativeEnum
  value()Ljava/lang/String; = Value()
com/google/ar/core/annotations/UsedByNative = Google.AR.Core.Annotations.IUsedByNative
  value()Ljava/lang/String; = Value()
com/google/ar/core/annotations/UsedByReflection = Google.AR.Core.Annotations.IUsedByReflection
  value()Ljava/lang/String; = Value()
com/google/ar/core/ArCoreApk = Google.AR.Core.ArCoreApk
  <init>()V = .ctor()
  getInstance()Lcom/google/ar/core/ArCoreApk; = Instance
  checkAvailability(Landroid/content/Context;)Lcom/google/ar/core/ArCoreApk$Availability; = CheckAvailability(Android.Content.Context)
  requestInstall(Landroid/app/Activity;Z)Lcom/google/ar/core/ArCoreApk$InstallStatus; = RequestInstall(Android.App.Activity, bool)
  requestInstall(Landroid/app/Activity;ZLcom/google/ar/core/ArCoreApk$InstallBehavior;Lcom/google/ar/core/ArCoreApk$UserMessageType;)Lcom/google/ar/core/ArCoreApk$InstallStatus; = RequestInstall(Android.App.Activity, bool, Google.AR.Core.ArCoreApk.InstallBehavior, Google.AR.Core.ArCoreApk.UserMessageType)
com/google/ar/core/ArImage = Google.AR.Core.ArImage
  <init>(Lcom/google/ar/core/Session;J)V = .ctor(Google.AR.Core.Session, long)
  getFormat()I = Format
  getHeight()I = Height
  getTimestamp()J = Timestamp
  getWidth()I = Width
  close()V = Close()
  getPlanes()[Landroid/media/Image$Plane; = GetPlanes()
  setTimestamp(J)V = SetTimestamp(long)
com/google/ar/core/AugmentedFace = Google.AR.Core.AugmentedFace
  <init>()V = .ctor()
  getCenterPose()Lcom/google/ar/core/Pose; = CenterPose
  getMeshNormals()Ljava/nio/FloatBuffer; = MeshNormals
  getMeshTextureCoordinates()Ljava/nio/FloatBuffer; = MeshTextureCoordinates
  getMeshTriangleIndices()Ljava/nio/ShortBuffer; = MeshTriangleIndices
  getMeshVertices()Ljava/nio/FloatBuffer; = MeshVertices
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getRegionPose(Lcom/google/ar/core/AugmentedFace$RegionType;)Lcom/google/ar/core/Pose; = GetRegionPose(Google.AR.Core.AugmentedFace.RegionType)
com/google/ar/core/AugmentedImage = Google.AR.Core.AugmentedImage
  getCenterPose()Lcom/google/ar/core/Pose; = CenterPose
  getExtentX()F = ExtentX
  getExtentZ()F = ExtentZ
  getIndex()I = Index
  getName()Ljava/lang/String; = Name
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getTrackingMethod()Lcom/google/ar/core/AugmentedImage$TrackingMethod; = GetTrackingMethod()
com/google/ar/core/AugmentedImageDatabase = Google.AR.Core.AugmentedImageDatabase
  <init>(Lcom/google/ar/core/Session;)V = .ctor(Google.AR.Core.Session)
  getNumImages()I = NumImages
  addImage(Ljava/lang/String;Landroid/graphics/Bitmap;)I = AddImage(string, Android.Graphics.Bitmap)
  addImage(Ljava/lang/String;Landroid/graphics/Bitmap;F)I = AddImage(string, Android.Graphics.Bitmap, float)
  deserialize(Lcom/google/ar/core/Session;Ljava/io/InputStream;)Lcom/google/ar/core/AugmentedImageDatabase; = Deserialize(Google.AR.Core.Session, System.IO.Stream)
  serialize(Ljava/io/OutputStream;)V = Serialize(System.IO.Stream)
com/google/ar/core/Camera = Google.AR.Core.Camera
  <init>()V = .ctor()
  getDisplayOrientedPose()Lcom/google/ar/core/Pose; = DisplayOrientedPose
  getImageIntrinsics()Lcom/google/ar/core/CameraIntrinsics; = ImageIntrinsics
  getPose()Lcom/google/ar/core/Pose; = Pose
  getTextureIntrinsics()Lcom/google/ar/core/CameraIntrinsics; = TextureIntrinsics
  getTrackingFailureReason()Lcom/google/ar/core/TrackingFailureReason; = TrackingFailureReason
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  getProjectionMatrix([FIFF)V = GetProjectionMatrix(float[], int, float, float)
  getViewMatrix([FI)V = GetViewMatrix(float[], int)
com/google/ar/core/CameraConfig = Google.AR.Core.CameraConfig
  <init>()V = .ctor()
  getCameraId()Ljava/lang/String; = CameraId
  getFpsRange()Landroid/util/Range; = FpsRange
  getImageSize()Landroid/util/Size; = ImageSize
  getTextureSize()Landroid/util/Size; = TextureSize
  getDepthSensorUsage()Lcom/google/ar/core/CameraConfig$DepthSensorUsage; = GetDepthSensorUsage()
  getFacingDirection()Lcom/google/ar/core/CameraConfig$FacingDirection; = GetFacingDirection()
com/google/ar/core/CameraConfigFilter = Google.AR.Core.CameraConfigFilter
  <init>()V = .ctor()
  <init>(Lcom/google/ar/core/Session;)V = .ctor(Google.AR.Core.Session)
  setDepthSensorUsage(Ljava/util/EnumSet;)Lcom/google/ar/core/CameraConfigFilter; = SetDepthSensorUsage(Java.Util.EnumSet)
  setTargetFps(Ljava/util/EnumSet;)Lcom/google/ar/core/CameraConfigFilter; = SetTargetFps(Java.Util.EnumSet)
com/google/ar/core/CameraIntrinsics = Google.AR.Core.CameraIntrinsics
  <init>()V = .ctor()
  getFocalLength()[F = GetFocalLength()
  getFocalLength([FI)V = GetFocalLength(float[], int)
  getImageDimensions()[I = GetImageDimensions()
  getImageDimensions([II)V = GetImageDimensions(int[], int)
  getPrincipalPoint()[F = GetPrincipalPoint()
  getPrincipalPoint([FI)V = GetPrincipalPoint(float[], int)
com/google/ar/core/Config = Google.AR.Core.Config
  <init>()V = .ctor()
  <init>(Lcom/google/ar/core/Session;)V = .ctor(Google.AR.Core.Session)
  getAugmentedImageDatabase()Lcom/google/ar/core/AugmentedImageDatabase; = AugmentedImageDatabase
  getAugmentedFaceMode()Lcom/google/ar/core/Config$AugmentedFaceMode; = GetAugmentedFaceMode()
  getCloudAnchorMode()Lcom/google/ar/core/Config$CloudAnchorMode; = GetCloudAnchorMode()
  getFocusMode()Lcom/google/ar/core/Config$FocusMode; = GetFocusMode()
  getLightEstimationMode()Lcom/google/ar/core/Config$LightEstimationMode; = GetLightEstimationMode()
  getPlaneFindingMode()Lcom/google/ar/core/Config$PlaneFindingMode; = GetPlaneFindingMode()
  getUpdateMode()Lcom/google/ar/core/Config$UpdateMode; = GetUpdateMode()
  setAugmentedFaceMode(Lcom/google/ar/core/Config$AugmentedFaceMode;)Lcom/google/ar/core/Config; = SetAugmentedFaceMode(Google.AR.Core.Config.AugmentedFaceMode)
  setAugmentedImageDatabase(Lcom/google/ar/core/AugmentedImageDatabase;)Lcom/google/ar/core/Config; = SetAugmentedImageDatabase(Google.AR.Core.AugmentedImageDatabase)
  setCloudAnchorMode(Lcom/google/ar/core/Config$CloudAnchorMode;)Lcom/google/ar/core/Config; = SetCloudAnchorMode(Google.AR.Core.Config.CloudAnchorMode)
  setFocusMode(Lcom/google/ar/core/Config$FocusMode;)Lcom/google/ar/core/Config; = SetFocusMode(Google.AR.Core.Config.FocusMode)
  setLightEstimationMode(Lcom/google/ar/core/Config$LightEstimationMode;)Lcom/google/ar/core/Config; = SetLightEstimationMode(Google.AR.Core.Config.LightEstimationMode)
  setPlaneFindingMode(Lcom/google/ar/core/Config$PlaneFindingMode;)Lcom/google/ar/core/Config; = SetPlaneFindingMode(Google.AR.Core.Config.PlaneFindingMode)
  setUpdateMode(Lcom/google/ar/core/Config$UpdateMode;)Lcom/google/ar/core/Config; = SetUpdateMode(Google.AR.Core.Config.UpdateMode)
com/google/ar/core/Coordinates2d = Google.AR.Core.Coordinates2d
  IMAGE_NORMALIZED = ImageNormalized
  IMAGE_PIXELS = ImagePixels
  OPENGL_NORMALIZED_DEVICE_COORDINATES = OpenglNormalizedDeviceCoordinates
  TEXTURE_NORMALIZED = TextureNormalized
  TEXTURE_TEXELS = TextureTexels
  VIEW = View
  VIEW_NORMALIZED = ViewNormalized
  valueOf(Ljava/lang/String;)Lcom/google/ar/core/Coordinates2d; = ValueOf(string)
  values()[Lcom/google/ar/core/Coordinates2d; = Values()
com/google/ar/core/exceptions/AnchorNotSupportedForHostingException = Google.AR.Core.Exceptions.AnchorNotSupportedForHostingException
  <init>()V = .ctor()
com/google/ar/core/exceptions/CameraNotAvailableException = Google.AR.Core.Exceptions.CameraNotAvailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/CloudAnchorsNotConfiguredException = Google.AR.Core.Exceptions.CloudAnchorsNotConfiguredException
  <init>()V = .ctor()
com/google/ar/core/exceptions/DataInvalidFormatException = Google.AR.Core.Exceptions.DataInvalidFormatException
  <init>()V = .ctor()
com/google/ar/core/exceptions/DataUnsupportedVersionException = Google.AR.Core.Exceptions.DataUnsupportedVersionException
  <init>()V = .ctor()
com/google/ar/core/exceptions/DeadlineExceededException = Google.AR.Core.Exceptions.DeadlineExceededException
  <init>()V = .ctor()
com/google/ar/core/exceptions/FatalException = Google.AR.Core.Exceptions.FatalException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/google/ar/core/exceptions/ImageInsufficientQualityException = Google.AR.Core.Exceptions.ImageInsufficientQualityException
  <init>()V = .ctor()
com/google/ar/core/exceptions/MissingGlContextException = Google.AR.Core.Exceptions.MissingGlContextException
  <init>()V = .ctor()
com/google/ar/core/exceptions/NotTrackingException = Google.AR.Core.Exceptions.NotTrackingException
  <init>()V = .ctor()
com/google/ar/core/exceptions/NotYetAvailableException = Google.AR.Core.Exceptions.NotYetAvailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/ResourceExhaustedException = Google.AR.Core.Exceptions.ResourceExhaustedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/SessionNotPausedException = Google.AR.Core.Exceptions.SessionNotPausedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/SessionPausedException = Google.AR.Core.Exceptions.SessionPausedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/TextureNotSetException = Google.AR.Core.Exceptions.TextureNotSetException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableApkTooOldException = Google.AR.Core.Exceptions.UnavailableApkTooOldException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableArcoreNotInstalledException = Google.AR.Core.Exceptions.UnavailableArcoreNotInstalledException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableDeviceNotCompatibleException = Google.AR.Core.Exceptions.UnavailableDeviceNotCompatibleException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableException = Google.AR.Core.Exceptions.UnavailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableSdkTooOldException = Google.AR.Core.Exceptions.UnavailableSdkTooOldException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableUserDeclinedInstallationException = Google.AR.Core.Exceptions.UnavailableUserDeclinedInstallationException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnsupportedConfigurationException = Google.AR.Core.Exceptions.UnsupportedConfigurationException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
com/google/ar/core/Frame = Google.AR.Core.Frame
  <init>()V = .ctor()
  getAndroidCameraTimestamp()J = AndroidCameraTimestamp
  getAndroidSensorPose()Lcom/google/ar/core/Pose; = AndroidSensorPose
  getCamera()Lcom/google/ar/core/Camera; = Camera
  hasDisplayGeometryChanged()Z = HasDisplayGeometryChanged
  getImageMetadata()Lcom/google/ar/core/ImageMetadata; = ImageMetadata
  getLightEstimate()Lcom/google/ar/core/LightEstimate; = LightEstimate
  getTimestamp()J = Timestamp
  getUpdatedAnchors()Ljava/util/Collection; = UpdatedAnchors
  acquireCameraImage()Landroid/media/Image; = AcquireCameraImage()
  acquirePointCloud()Lcom/google/ar/core/PointCloud; = AcquirePointCloud()
  getUpdatedTrackables(Ljava/lang/Class;)Ljava/util/Collection; = GetUpdatedTrackables(Java.Lang.Class)
  hitTest(Landroid/view/MotionEvent;)Ljava/util/List; = HitTest(Android.Views.MotionEvent)
  hitTest(FF)Ljava/util/List; = HitTest(float, float)
  hitTest([FI[FI)Ljava/util/List; = HitTest(float[], int, float[], int)
  transformCoordinates2d(Lcom/google/ar/core/Coordinates2d;[FLcom/google/ar/core/Coordinates2d;[F)V = TransformCoordinates2d(Google.AR.Core.Coordinates2d, float[], Google.AR.Core.Coordinates2d, float[])
  transformCoordinates2d(Lcom/google/ar/core/Coordinates2d;Ljava/nio/FloatBuffer;Lcom/google/ar/core/Coordinates2d;Ljava/nio/FloatBuffer;)V = TransformCoordinates2d(Google.AR.Core.Coordinates2d, Java.Nio.FloatBuffer, Google.AR.Core.Coordinates2d, Java.Nio.FloatBuffer)
  transformDisplayUvCoords(Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;)V = TransformDisplayUvCoords(Java.Nio.FloatBuffer, Java.Nio.FloatBuffer)
com/google/ar/core/HitResult = Google.AR.Core.HitResult
  <init>()V = .ctor()
  getDistance()F = Distance
  getHitPose()Lcom/google/ar/core/Pose; = HitPose
  getTrackable()Lcom/google/ar/core/Trackable; = Trackable
  createAnchor()Lcom/google/ar/core/Anchor; = CreateAnchor()
com/google/ar/core/ImageFormat = Google.AR.Core.ImageFormat
  RGBA_FP16 = RgbaFp16
  YUV_420_888 = Yuv420888
com/google/ar/core/ImageMetadata = Google.AR.Core.ImageMetadata
  <init>()V = .ctor()
  BLACK_LEVEL_LOCK = BlackLevelLock
  COLOR_CORRECTION_ABERRATION_MODE = ColorCorrectionAberrationMode
  COLOR_CORRECTION_GAINS = ColorCorrectionGains
  COLOR_CORRECTION_MODE = ColorCorrectionMode
  COLOR_CORRECTION_TRANSFORM = ColorCorrectionTransform
  CONTROL_AE_ANTIBANDING_MODE = ControlAeAntibandingMode
  CONTROL_AE_EXPOSURE_COMPENSATION = ControlAeExposureCompensation
  CONTROL_AE_LOCK = ControlAeLock
  CONTROL_AE_MODE = ControlAeMode
  CONTROL_AE_PRECAPTURE_TRIGGER = ControlAePrecaptureTrigger
  CONTROL_AE_REGIONS = ControlAeRegions
  CONTROL_AE_STATE = ControlAeState
  CONTROL_AE_TARGET_FPS_RANGE = ControlAeTargetFpsRange
  CONTROL_AF_MODE = ControlAfMode
  CONTROL_AF_REGIONS = ControlAfRegions
  CONTROL_AF_STATE = ControlAfState
  CONTROL_AF_TRIGGER = ControlAfTrigger
  CONTROL_AWB_LOCK = ControlAwbLock
  CONTROL_AWB_MODE = ControlAwbMode
  CONTROL_AWB_REGIONS = ControlAwbRegions
  CONTROL_AWB_STATE = ControlAwbState
  CONTROL_CAPTURE_INTENT = ControlCaptureIntent
  CONTROL_EFFECT_MODE = ControlEffectMode
  CONTROL_MODE = ControlMode
  CONTROL_POST_RAW_SENSITIVITY_BOOST = ControlPostRawSensitivityBoost
  CONTROL_SCENE_MODE = ControlSceneMode
  CONTROL_VIDEO_STABILIZATION_MODE = ControlVideoStabilizationMode
  EDGE_MODE = EdgeMode
  FLASH_MODE = FlashMode
  FLASH_STATE = FlashState
  HOT_PIXEL_MODE = HotPixelMode
  JPEG_GPS_COORDINATES = JpegGpsCoordinates
  JPEG_GPS_PROCESSING_METHOD = JpegGpsProcessingMethod
  JPEG_GPS_TIMESTAMP = JpegGpsTimestamp
  JPEG_ORIENTATION = JpegOrientation
  JPEG_QUALITY = JpegQuality
  JPEG_THUMBNAIL_QUALITY = JpegThumbnailQuality
  JPEG_THUMBNAIL_SIZE = JpegThumbnailSize
  LENS_APERTURE = LensAperture
  LENS_FILTER_DENSITY = LensFilterDensity
  LENS_FOCAL_LENGTH = LensFocalLength
  LENS_FOCUS_DISTANCE = LensFocusDistance
  LENS_FOCUS_RANGE = LensFocusRange
  LENS_INTRINSIC_CALIBRATION = LensIntrinsicCalibration
  LENS_OPTICAL_STABILIZATION_MODE = LensOpticalStabilizationMode
  LENS_POSE_ROTATION = LensPoseRotation
  LENS_POSE_TRANSLATION = LensPoseTranslation
  LENS_RADIAL_DISTORTION = LensRadialDistortion
  LENS_STATE = LensState
  NOISE_REDUCTION_MODE = NoiseReductionMode
  REQUEST_PIPELINE_DEPTH = RequestPipelineDepth
  SCALER_CROP_REGION = ScalerCropRegion
  SENSOR_DYNAMIC_BLACK_LEVEL = SensorDynamicBlackLevel
  SENSOR_DYNAMIC_WHITE_LEVEL = SensorDynamicWhiteLevel
  SENSOR_EXPOSURE_TIME = SensorExposureTime
  SENSOR_FRAME_DURATION = SensorFrameDuration
  SENSOR_GREEN_SPLIT = SensorGreenSplit
  SENSOR_NEUTRAL_COLOR_POINT = SensorNeutralColorPoint
  SENSOR_NOISE_PROFILE = SensorNoiseProfile
  SENSOR_ROLLING_SHUTTER_SKEW = SensorRollingShutterSkew
  SENSOR_SENSITIVITY = SensorSensitivity
  SENSOR_TEST_PATTERN_DATA = SensorTestPatternData
  SENSOR_TEST_PATTERN_MODE = SensorTestPatternMode
  SENSOR_TIMESTAMP = SensorTimestamp
  SHADING_MODE = ShadingMode
  STATISTICS_FACE_DETECT_MODE = StatisticsFaceDetectMode
  STATISTICS_FACE_IDS = StatisticsFaceIds
  STATISTICS_FACE_LANDMARKS = StatisticsFaceLandmarks
  STATISTICS_FACE_RECTANGLES = StatisticsFaceRectangles
  STATISTICS_FACE_SCORES = StatisticsFaceScores
  STATISTICS_HOT_PIXEL_MAP = StatisticsHotPixelMap
  STATISTICS_HOT_PIXEL_MAP_MODE = StatisticsHotPixelMapMode
  STATISTICS_LENS_SHADING_MAP = StatisticsLensShadingMap
  STATISTICS_LENS_SHADING_MAP_MODE = StatisticsLensShadingMapMode
  STATISTICS_SCENE_FLICKER = StatisticsSceneFlicker
  SYNC_FRAME_NUMBER = SyncFrameNumber
  TONEMAP_CURVE_BLUE = TonemapCurveBlue
  TONEMAP_CURVE_GREEN = TonemapCurveGreen
  TONEMAP_CURVE_RED = TonemapCurveRed
  TONEMAP_GAMMA = TonemapGamma
  TONEMAP_MODE = TonemapMode
  TONEMAP_PRESET_CURVE = TonemapPresetCurve
  getByte(I)B = GetByte(int)
  getByteArray(I)[B = GetByteArray(int)
  getDouble(I)D = GetDouble(int)
  getDoubleArray(I)[D = GetDoubleArray(int)
  getFloat(I)F = GetFloat(int)
  getFloatArray(I)[F = GetFloatArray(int)
  getInt(I)I = GetInt(int)
  getIntArray(I)[I = GetIntArray(int)
  getKeys()[J = GetKeys()
  getLong(I)J = GetLong(int)
  getLongArray(I)[J = GetLongArray(int)
  getRational(I)Landroid/util/Rational; = GetRational(int)
  getRationalArray(I)[Landroid/util/Rational; = GetRationalArray(int)
com/google/ar/core/InstallActivity = Google.AR.Core.InstallActivity
  <init>()V = .ctor()
  onDestroy()V = OnDestroy()
com/google/ar/core/LightEstimate = Google.AR.Core.LightEstimate
  <init>()V = .ctor()
  getPixelIntensity()F = PixelIntensity
  getTimestamp()J = Timestamp
  acquireEnvironmentalHdrCubeMap()[Lcom/google/ar/core/ArImage; = AcquireEnvironmentalHdrCubeMap()
  getColorCorrection([FI)V = GetColorCorrection(float[], int)
  getEnvironmentalHdrAmbientSphericalHarmonics()[F = GetEnvironmentalHdrAmbientSphericalHarmonics()
  getEnvironmentalHdrMainLightDirection()[F = GetEnvironmentalHdrMainLightDirection()
  getEnvironmentalHdrMainLightIntensity()[F = GetEnvironmentalHdrMainLightIntensity()
  getState()Lcom/google/ar/core/LightEstimate$State; = GetState()
com/google/ar/core/Plane = Google.AR.Core.Plane
  <init>()V = .ctor()
  getCenterPose()Lcom/google/ar/core/Pose; = CenterPose
  getExtentX()F = ExtentX
  getExtentZ()F = ExtentZ
  getPolygon()Ljava/nio/FloatBuffer; = Polygon
  getSubsumedBy()Lcom/google/ar/core/Plane; = SubsumedBy
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getType()Lcom/google/ar/core/Plane$Type; = GetType()
  isPoseInExtents(Lcom/google/ar/core/Pose;)Z = IsPoseInExtents(Google.AR.Core.Pose)
  isPoseInPolygon(Lcom/google/ar/core/Pose;)Z = IsPoseInPolygon(Google.AR.Core.Pose)
com/google/ar/core/Point = Google.AR.Core.Point
  <init>()V = .ctor()
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getOrientationMode()Lcom/google/ar/core/Point$OrientationMode; = GetOrientationMode()
com/google/ar/core/PointCloud = Google.AR.Core.PointCloud
  <init>()V = .ctor()
  getIds()Ljava/nio/IntBuffer; = Ids
  getPoints()Ljava/nio/FloatBuffer; = Points
  getTimestamp()J = Timestamp
  close()V = Close()
  release()V = Release()
com/google/ar/core/Pose = Google.AR.Core.Pose
  <init>([F[F)V = .ctor(float[], float[])
  IDENTITY = Identity
  compose(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Pose; = Compose(Google.AR.Core.Pose)
  extractRotation()Lcom/google/ar/core/Pose; = ExtractRotation()
  extractTranslation()Lcom/google/ar/core/Pose; = ExtractTranslation()
  getRotationQuaternion()[F = GetRotationQuaternion()
  getRotationQuaternion([FI)V = GetRotationQuaternion(float[], int)
  getTransformedAxis(IF)[F = GetTransformedAxis(int, float)
  getTransformedAxis(IF[FI)V = GetTransformedAxis(int, float, float[], int)
  getTranslation()[F = GetTranslation()
  getTranslation([FI)V = GetTranslation(float[], int)
  getXAxis()[F = GetXAxis()
  getYAxis()[F = GetYAxis()
  getZAxis()[F = GetZAxis()
  inverse()Lcom/google/ar/core/Pose; = Inverse()
  makeInterpolated(Lcom/google/ar/core/Pose;Lcom/google/ar/core/Pose;F)Lcom/google/ar/core/Pose; = MakeInterpolated(Google.AR.Core.Pose, Google.AR.Core.Pose, float)
  makeRotation(FFFF)Lcom/google/ar/core/Pose; = MakeRotation(float, float, float, float)
  makeRotation([F)Lcom/google/ar/core/Pose; = MakeRotation(float[])
  makeTranslation(FFF)Lcom/google/ar/core/Pose; = MakeTranslation(float, float, float)
  makeTranslation([F)Lcom/google/ar/core/Pose; = MakeTranslation(float[])
  qw()F = Qw()
  qx()F = Qx()
  qy()F = Qy()
  qz()F = Qz()
  rotateVector([F)[F = RotateVector(float[])
  rotateVector([FI[FI)V = RotateVector(float[], int, float[], int)
  toMatrix([FI)V = ToMatrix(float[], int)
  transformPoint([F)[F = TransformPoint(float[])
  transformPoint([FI[FI)V = TransformPoint(float[], int, float[], int)
  tx()F = Tx()
  ty()F = Ty()
  tz()F = Tz()
com/google/ar/core/Session = Google.AR.Core.Session
  <init>()V = .ctor()
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Ljava/util/Set;)V = .ctor(Android.Content.Context, System.Collections.Generic.ICollection<Google.AR.Core.Session.Feature>)
  getAllAnchors()Ljava/util/Collection; = AllAnchors
  getCameraConfig()Lcom/google/ar/core/CameraConfig; = CameraConfig
  setCameraConfig(Lcom/google/ar/core/CameraConfig;)V = CameraConfig
  getConfig()Lcom/google/ar/core/Config; = Config
  getSharedCamera()Lcom/google/ar/core/SharedCamera; = SharedCamera
  getSupportedCameraConfigs()Ljava/util/List; = SupportedCameraConfigs
  close()V = Close()
  configure(Lcom/google/ar/core/Config;)V = Configure(Google.AR.Core.Config)
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  createForSharedCamera(Landroid/content/Context;)Lcom/google/ar/core/Session; = CreateForSharedCamera(Android.Content.Context)
  getAllTrackables(Ljava/lang/Class;)Ljava/util/Collection; = GetAllTrackables(Java.Lang.Class)
  getConfig(Lcom/google/ar/core/Config;)V = GetConfig(Google.AR.Core.Config)
  getSupportedCameraConfigs(Lcom/google/ar/core/CameraConfigFilter;)Ljava/util/List; = GetSupportedCameraConfigs(Google.AR.Core.CameraConfigFilter)
  hostCloudAnchor(Lcom/google/ar/core/Anchor;)Lcom/google/ar/core/Anchor; = HostCloudAnchor(Google.AR.Core.Anchor)
  isSupported(Lcom/google/ar/core/Config;)Z = IsSupported(Google.AR.Core.Config)
  pause()V = Pause()
  resolveCloudAnchor(Ljava/lang/String;)Lcom/google/ar/core/Anchor; = ResolveCloudAnchor(string)
  resume()V = Resume()
  setCameraTextureName(I)V = SetCameraTextureName(int)
  setDisplayGeometry(III)V = SetDisplayGeometry(int, int, int)
  update()Lcom/google/ar/core/Frame; = Update()
com/google/ar/core/SharedCamera = Google.AR.Core.SharedCamera
  getArCoreSurfaces()Ljava/util/List; = ArCoreSurfaces
  getSurfaceTexture()Landroid/graphics/SurfaceTexture; = SurfaceTexture
  createARDeviceStateCallback(Landroid/hardware/camera2/CameraDevice$StateCallback;Landroid/os/Handler;)Landroid/hardware/camera2/CameraDevice$StateCallback; = CreateARDeviceStateCallback(Android.Hardware.Camera2.CameraDevice.StateCallback, Android.OS.Handler)
  createARSessionStateCallback(Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)Landroid/hardware/camera2/CameraCaptureSession$StateCallback; = CreateARSessionStateCallback(Android.Hardware.Camera2.CameraCaptureSession.StateCallback, Android.OS.Handler)
  setAppSurfaces(Ljava/lang/String;Ljava/util/List;)V = SetAppSurfaces(string, System.Collections.Generic.IList<Android.Views.Surface>)
  setCaptureCallback(Landroid/hardware/camera2/CameraCaptureSession$CaptureCallback;Landroid/os/Handler;)V = SetCaptureCallback(Android.Hardware.Camera2.CameraCaptureSession.CaptureCallback, Android.OS.Handler)
com/google/ar/core/Trackable = Google.AR.Core.ITrackable
  getAnchors()Ljava/util/Collection; = Anchors
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
com/google/ar/core/TrackableBase = Google.AR.Core.TrackableBase
  getAnchors()Ljava/util/Collection; = Anchors
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
com/google/ar/core/TrackingFailureReason = Google.AR.Core.TrackingFailureReason
  BAD_STATE = BadState
  EXCESSIVE_MOTION = ExcessiveMotion
  INSUFFICIENT_FEATURES = InsufficientFeatures
  INSUFFICIENT_LIGHT = InsufficientLight
  NONE = None
  valueOf(Ljava/lang/String;)Lcom/google/ar/core/TrackingFailureReason; = ValueOf(string)
  values()[Lcom/google/ar/core/TrackingFailureReason; = Values()
com/google/ar/core/TrackingState = Google.AR.Core.TrackingState
  PAUSED = Paused
  STOPPED = Stopped
  TRACKING = Tracking
  valueOf(Ljava/lang/String;)Lcom/google/ar/core/TrackingState; = ValueOf(string)
  values()[Lcom/google/ar/core/TrackingState; = Values()
com/google/vr/dynamite/client/DynamiteClient = Google.VR.Dynamite.Client.DynamiteClient
  checkVersion(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I = CheckVersion(Android.Content.Context, string, string, string)
  getRemoteClassLoader(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/ClassLoader; = GetRemoteClassLoader(Android.Content.Context, string, string)
  getRemoteContext(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/content/Context; = GetRemoteContext(Android.Content.Context, string, string)
  getRemoteDexClassLoader(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/ClassLoader; = GetRemoteDexClassLoader(Android.Content.Context, string)
  loadNativeRemoteLibrary(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)J = LoadNativeRemoteLibrary(Android.Content.Context, string, string)
com/google/vr/dynamite/client/ILoadedInstanceCreator = Google.VR.Dynamite.Client.ILoadedInstanceCreator
  newNativeLibraryLoader(Lcom/google/vr/dynamite/client/IObjectWrapper;Lcom/google/vr/dynamite/client/IObjectWrapper;)Lcom/google/vr/dynamite/client/INativeLibraryLoader; = NewNativeLibraryLoader(Google.VR.Dynamite.Client.IObjectWrapper, Google.VR.Dynamite.Client.IObjectWrapper)
com/google/vr/dynamite/client/INativeLibraryLoader = Google.VR.Dynamite.Client.INativeLibraryLoader
  checkVersion(Ljava/lang/String;)I = CheckVersion(string)
  initializeAndLoadNativeLibrary(Ljava/lang/String;)J = InitializeAndLoadNativeLibrary(string)
com/google/vr/dynamite/client/IObjectWrapper = Google.VR.Dynamite.Client.IObjectWrapper
com/google/vr/dynamite/client/ObjectWrapper = Google.VR.Dynamite.Client.ObjectWrapper
  a(Ljava/lang/Object;)Lcom/google/vr/dynamite/client/IObjectWrapper; = A(Java.Lang.Object)
  unwrap(Lcom/google/vr/dynamite/client/IObjectWrapper;Ljava/lang/Class;)Ljava/lang/Object; = Unwrap(Google.VR.Dynamite.Client.IObjectWrapper, Java.Lang.Class)
com/google/vr/dynamite/client/UsedByNative = Google.VR.Dynamite.Client.IUsedByNative
com/google/vr/dynamite/client/UsedByReflection = Google.VR.Dynamite.Client.IUsedByReflection
